package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func RubyMessageType(entity EntityWithParent) string {
	names := strings.Split(entity.FullyQualifiedName(), ".")
	// Remove empty leading name
	if names[0] == "" {
		names = names[1:]
	}
	// Go to upper case
	for i, name := range names {
		names[i] = pgs.Name(name).UpperCamelCase().String()
	}
	return fmt.Sprintf("%s", strings.Join(names, "::"))
}

func RubyMethodReturnType(method pgs.Method) string {
	t := RubyMessageType(method.Output())
	return t
}

func RubyMethodParamType(method pgs.Method) string {
	t := RubyMessageType(method.Input())
	return t
}

func RubyDocComment(method pgs.Method) string {
	commentLines := deleteEmpty(strings.Split(method.SourceCodeInfo().LeadingComments(), "\n"))
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf("# %s\n# @param [%s] request\n# @return [%s]", strings.Join(commentLines, "\n#"), MethodParamType(method), RubyMethodReturnType(method))
}

func RubyMethodArguments(method pgs.Method) string {
	if SdkNoArguments(method) {
		return ""
	} else {
		return "request"
	}
}

func RubyDefaultRequestObject(method pgs.Method) string {
	if SdkNoArguments(method) {
		return fmt.Sprintf("request = %s.new", RubyMethodParamType(method))
	}
	return ""
}

const RubyServiceTpl = `# BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
# target: {{ .TargetPath }}
nil
{{ range .File.Services }}{{ range .Methods }}{{ if SdkTemplateGenerate . }}
	{{ RubyDocComment . }}
    def {{ .Name.LowerSnakeCase }}({{ RubyMethodArguments . }})
        {{ RubyDefaultRequestObject . }}
        @client.{{ .Name.LowerSnakeCase }}(request, metadata: metadata(request))
    end{{ end }}{{ end }}
{{ end }}
# END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
