package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func JavaMessageType(entity EntityWithParent, service pgs.Service) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	// TODO - Handle "AccountOuterClass."
	return fmt.Sprintf("%sOuterClass.%s", service.Name().UpperCamelCase(), strings.Join(names, "."))
}

func JavaMethodReturnType(method pgs.Method) string {
	return JavaMethodType(method.Output(), method.Service(), method.ServerStreaming())
}

func JavaMethodParamType(method pgs.Method) string {
	return JavaMethodType(method.Input(), method.Service(), method.ClientStreaming())
}

func JavaDocComment(entity pgs.Entity) string {
	commentLines := deleteEmpty(strings.Split(entity.SourceCodeInfo().LeadingComments(), "\n"))
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf(" /// %s", strings.Join(commentLines, "\n///"))
}

func JavaAsync(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "async"
}
func JavaAwait(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "await"
}

func JavaMethodType(message pgs.Message, service pgs.Service, streaming bool) string {
	t := JavaMessageType(message, service)
	if streaming {
		return fmt.Sprintf("Iterator<%s>", t)
	} else {
		return t
	}
}

const JavaServiceTpl = `// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}
  public ListenableFuture<{{ JavaMethodReturnType . }}> {{ .Name.LowerCamelCase }}({{ JavaMethodParamType . }} request)
      throws InvalidProtocolBufferException, DidException {
    // TODO - Handle metadata
	return withMetadata(stub, request).{{ .Name.LowerCamelCase }}(request);
  }
{{ end }}{{ end }}
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
