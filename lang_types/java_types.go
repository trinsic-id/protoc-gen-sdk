package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func JavaMessageType(entity EntityWithParent, service pgs.Service) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	return fmt.Sprintf("%s", strings.Join(names, "."))
}

func JavaMethodReturnType(method pgs.Method) string {
	t := JavaMessageType(method.Output(), method.Service())
	if method.ServerStreaming() {
		return fmt.Sprintf("Iterator<%s>", t)
	} else {
		return fmt.Sprintf("ListenableFuture<%s>", t)
	}
}

func JavaMethodParamType(method pgs.Method) string {
	return JavaMethodType(method.Input(), method.Service(), method.ClientStreaming())
}

func JavaDocComment(method pgs.Method) string {
	commentLines := deleteEmpty(strings.Split(method.SourceCodeInfo().LeadingComments(), "\n"))
	commentLines = append(GetAnnotatedComment(method), commentLines...)
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf("/**%s */", strings.Join(commentLines, "\n*"))
}

func JavaAsync(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "async"
}
func JavaAwait(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "await"
}

func JavaStreamStub(method pgs.Method) string {
	if method.ServerStreaming() {
		return "stub2"
	}
	return "stub"
}

func JavaMethodType(message pgs.Message, service pgs.Service, streaming bool) string {
	t := JavaMessageType(message, service)
	if streaming {
		return fmt.Sprintf("Iterator<%s>", t)
	} else {
		return t
	}
}

func JavaMethodArguments(method pgs.Method) string {
	if SdkNoArguments(method) {
		return ""
	} else {
		return fmt.Sprintf("%s request", MethodParamType(method))
	}
}

func JavaDefaultRequestObject(method pgs.Method) string {
	if SdkNoArguments(method) {
		return fmt.Sprintf("var request = %s.newBuilder().build();", MethodParamType(method))
	}
	return ""
}
func JavaAnnotations(method pgs.Method) string {
	if SdkDeprecated(method) {
		return "@Deprecated"
	}
	// TODO - Support experimental
	return ""
}

const JavaServiceTpl = `// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}{{ if SdkTemplateGenerate . }}
  {{ JavaDocComment . }}
  {{ JavaAnnotations . }}
  public {{ JavaMethodReturnType . }} {{ .Name.LowerCamelCase }}({{ JavaMethodArguments . }})
      throws InvalidProtocolBufferException, DidException {
    {{ JavaDefaultRequestObject . }}
	return withMetadata({{ JavaStreamStub . }}, request).{{ .Name.LowerCamelCase }}(request);
  }{{ end }}{{ end }}{{ end }}
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
