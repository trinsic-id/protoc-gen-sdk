package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func KotlinMessageType(entity EntityWithParent) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	return fmt.Sprintf("%s", strings.Join(names, "."))
}

func KotlinMethodReturnType(method pgs.Method) string {
	return KotlinMethodType(method.Output(), method.ServerStreaming())
}

func KotlinDocComment(method pgs.Method) string {
	commentLines := deleteEmpty(strings.Split(method.SourceCodeInfo().LeadingComments(), "\n"))
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf(" /** %s\n*/", strings.Join(commentLines, "\n* "))
}

func KotlinAsync(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "async"
}
func KotlinAwait(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "await"
}

func KotlinMethodType(message pgs.Message, streaming bool) string {
	t := KotlinMessageType(message)
	if streaming {
		return fmt.Sprintf("Flow<%s>", t)
	} else {
		return t
	}
}

const KotlinServiceTpl = `// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}{{ if SdkTemplateGenerate . }}
  @Throws(InvalidProtocolBufferException::class, DidException::class)
  suspend fun {{ .Name.LowerCamelCase }}(request: {{ MethodParamType . }}): {{ KotlinMethodReturnType . }} {
	{{ KotlinDocComment . }}
    // TODO - Support metadata anonymous
    return withMetadata(stub, request).{{ .Name.LowerCamelCase }}(request)
  }{{ end }}{{ end }}{{ end }}
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
