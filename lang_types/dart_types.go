package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func DartMessageType(entity EntityWithParent) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	return fmt.Sprintf("%s", strings.Join(names, "."))
}

func MethodParamType(method pgs.Method) string {
	return DartMessageType(method.Input())
}

func DartMethodReturnType(method pgs.Method) string {
	return DartMethodType(method.Output(), method.ServerStreaming())
}

func DartDocComment(entity pgs.Entity) string {
	commentLines := deleteEmpty(strings.Split(entity.SourceCodeInfo().LeadingComments(), "\n"))
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf(" /// %s", strings.Join(commentLines, "\n///"))
}

func DartAsync(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "async"
}
func DartAwait(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "await"
}

func DartMethodType(message pgs.Message, streaming bool) string {
	t := DartMessageType(message)
	if streaming {
		return fmt.Sprintf("$grpc.ResponseStream<%s>", t)
	} else {
		return fmt.Sprintf("Future<%s>", t)
	}
}

const DartServiceTpl = `// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}
    {{ DartMethodReturnType . }} {{ .Name.LowerCamelCase }}({{ MethodParamType . }} request) {{ DartAsync . }} {
        {{ DartDocComment . }}
        return {{ DartAwait . }} client.{{ .Name.LowerCamelCase }}(request);
    }{{ end }}
{{ end }}
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
