package lang_types

import (
	"fmt"
	"strings"

	pgs "github.com/lyft/protoc-gen-star"
)

func TypescriptMessageType(entity EntityWithParent) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	return fmt.Sprintf("%s", strings.Join(names, "."))
}

func TypescriptMethodReturnType(method pgs.Method) string {
	return TypescriptMethodType(method.Output(), method.ServerStreaming())
}

func TypescriptEntityDocComment(entity pgs.Entity) string {
	commentLines := deleteEmpty(strings.Split(entity.SourceCodeInfo().LeadingComments(), "\n"))
	if len(commentLines) == 0 {
		return ""
	}
	return fmt.Sprintf(" /// %s", strings.Join(commentLines, "\n///"))
}

func TypescriptAsync(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "async"
}
func TypescriptAwait(method pgs.Method) string {
	if method.ServerStreaming() {
		return ""
	}
	return "await"
}

func TypescriptMethodType(message pgs.Message, streaming bool) string {
	t := TypescriptMessageType(message)
	if streaming {
		return fmt.Sprintf("Promise<AsyncIterable<%s>>", t)
	} else {
		return fmt.Sprintf("Promise<%s>", t)
	}
}

const TypescriptServiceTpl = `// BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
// target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}
  public async {{ .Name.LowerCamelCase }}(
    request: {{ MethodParamType . }}
  ): {{ TypescriptMethodReturnType . }} {
    // TODO - handle metadata
    return this.client.{{ .Name.LowerCamelCase }}(request, {
      metadata: await this.getMetadata(
        {{ MethodParamType . }}.encode(request).finish()
      ),
    });
  }
{{ end }}{{ end }}
// END Code generated by protoc-gen-trinsic. DO NOT EDIT.`
