package lang_types

import (
	"fmt"
	pgs "github.com/lyft/protoc-gen-star/v2"
	"os"
	"strings"
)

func PythonMessageType(entity EntityWithParent) string {
	names := make([]string, 0)
	outer := entity
	ok := true
	for ok {
		name := outer.Name().String()
		names = append([]string{strings.Title(name)}, names...)
		outer, ok = outer.Parent().(pgs.Message)
	}
	return fmt.Sprintf("%s", strings.Join(names, "."))
}

func PythonMethodReturnType(method pgs.Method) string {
	t := PythonMessageType(method.Output())
	if method.ServerStreaming() {
		return fmt.Sprintf("AsyncIterator[%s]", t)
	}
	return t
}

func PythonDocComment(method pgs.Method) string {
	commentLines := deleteEmpty(strings.Split(method.SourceCodeInfo().LeadingComments(), "\n"))
	commentLines = append(GetAnnotatedComment(method), commentLines...)
	if len(commentLines) <= 1 {
		return fmt.Sprintf("\"\"\" %s \"\"\"", strings.Join(commentLines, ""))
	}
	return fmt.Sprintf("\"\"\"\n       %s\n        \"\"\"", strings.Join(commentLines, "\n        "))
}

func PythonBuildMetadata(method pgs.Method) string {
	s := "(request)"
	if SdkAnonymous(method) {
		s = "()"
	}
	return "self.build_metadata" + s
}

func PythonMethodArguments(method pgs.Method) string {
	if SdkNoArguments(method) {
		return "self"
	} else {
		return fmt.Sprintf("self, *, request: %s", MethodParamType(method))
	}
}

func PythonDefaultRequestObject(method pgs.Method) string {
	if SdkNoArguments(method) {
		return fmt.Sprintf("request = %s()", MethodParamType(method))
	}
	return ""
}

func PythonAnnotations(method pgs.Method) string {
	isDep, msgDep := SdkDeprecated(method)
	isExp, msgExp := SdkExperimental(method)
	if isDep {
		return fmt.Sprintf("@deprecation.deprecated(details=\"%s\")", msgDep)
	}
	if isExp {
		return fmt.Sprintf("@deprecation.deprecated(details=\"%s\")", msgExp)
	}
	return ""
}

func PythonDocCreateServiceInjection(service pgs.Service) string {
	serviceName := service.Name().LowerSnakeCase().String()
	return fmt.Sprintf("# %s() {\n%s\n# }", DocsCreateService(service),
		"trinsic_service = TrinsicService(server_config=trinsic_config(auth_token=\"YOUR-AUTH-TOKEN\"))\n"+
			fmt.Sprintf("%s_service = trinsic_service.%s", serviceName, serviceName))
}

func PythonDocMethodInjection(method pgs.Method) string {
	serviceName := method.Service().Name().LowerSnakeCase().String() + "_service"
	responseName := method.Name().LowerSnakeCase().String() + "_response"
	method_args := make([]string, len(method.Input().Fields()))
	for i, field := range method.Input().Fields() {
		method_args[i] = fmt.Sprintf("%s=%s", field.Name().LowerSnakeCase(), GetDefaultArgumentValue(field))
	}
	argParameters := strings.Join(method_args, ", ")
	methodBody := fmt.Sprintf("%s = await %s.%s(request=%sRequest(%s))",
		responseName, serviceName, method.Name().LowerSnakeCase().String(),
		method.Name().UpperCamelCase().String(),
		argParameters)
	return fmt.Sprintf("# %s%s() {\n%s\n# }", method.Service().Name().LowerCamelCase(), method.Name().UpperCamelCase(),
		methodBody)
}

func GetDefaultArgumentValue(field pgs.Field) string {
	stringFormat := ""
	protoType := field.Type().ProtoType()
	if protoType.IsNumeric() {
		stringFormat = "0"
	} else if protoType == pgs.StringT {
		// UPPER-KEBAB-CASE
		// TODO - Handle JSON?
		stringFormat = fmt.Sprintf("\"YOUR-%s\"", strings.ToUpper(strings.Replace(field.Name().LowerSnakeCase().String(), "_", "-", -1)))
	} else if protoType == pgs.MessageT {
		fullTypeName := field.Descriptor().GetTypeName()
		typeScopes := strings.Split(fullTypeName, ".")
		stringFormat = typeScopes[len(typeScopes)-1] + "()"
	} else if protoType == pgs.BoolT {
		stringFormat = "True"
	} else if protoType == pgs.EnumT {
		fullTypeName := field.Descriptor().GetTypeName()
		typeScopes := strings.Split(fullTypeName, ".")
		enumFieldName := field.Type().Enum().Descriptor().GetValue()[0].GetName()
		stringFormat = fmt.Sprintf("%s.%s", typeScopes[len(typeScopes)-1], enumFieldName)
	} else if protoType == pgs.BytesT {
		stringFormat = "bytes(\"1234\")"
	} else {
		fmt.Fprintln(os.Stderr, "Unknown type="+field.Type().ProtoType().String())
	}
	if field.Type().IsRepeated() {
		stringFormat = "[" + stringFormat + "]"
	}
	return stringFormat
}

const PythonServiceTpl = `# BEGIN Code generated by protoc-gen-trinsic. DO NOT EDIT.
# target: {{ .TargetPath }}
{{ range .File.Services }}{{ range .Methods }}{{ if SdkTemplateGenerate . }}
    {{ PythonAnnotations . }}
    async def {{ .Name.LowerSnakeCase }}({{ PythonMethodArguments . }}) -> {{ PythonMethodReturnType . }}:
        {{ PythonDocComment . }}
        {{ PythonDefaultRequestObject . }}
        return await self.client.{{ .Name.LowerSnakeCase }}(request, metadata={{ PythonBuildMetadata . }})
    {{ end }}{{ end }}
{{ end }}
# END Code generated by protoc-gen-trinsic. DO NOT EDIT.`

const PythonDocTpl = `# BEGIN Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.
# target: {{ .TargetPath }}
{{ range .File.Services }}
{{ PythonDocCreateServiceInjection . }}
{{ range .Methods }}
{{ PythonDocMethodInjection . }}
{{ end }}{{ end }}
# END Doc Code generated by protoc-gen-trinsic. DO NOT EDIT.`
