package main

import (
	"github.com/trinsic-id/protoc-gen-sdk/lang_types"
	"strings"
	"text/template"

	pgs "github.com/lyft/protoc-gen-star"
	pgsgo "github.com/lyft/protoc-gen-star/lang/go"
)

type trinsicModule struct {
	*pgs.ModuleBase
	ctx        pgsgo.Context
	serviceTpl *template.Template
}

func trinsicPython() *trinsicModule { return &trinsicModule{ModuleBase: &pgs.ModuleBase{}} }

func (m *trinsicModule) InitContext(c pgs.BuildContext) {
	m.ModuleBase.InitContext(c)
	m.ctx = pgsgo.InitContext(c.Parameters())

	funcs := map[string]interface{}{
		"pythonMethodParamType":  lang_types.PythonMethodParamType,
		"pythonMethodReturnType": lang_types.PythonMethodReturnType,
		"docComment":             lang_types.EntityDocComment,
	} // TODO - Handle the per-language type information

	m.serviceTpl = template.Must(template.New("pythonService").Funcs(funcs).Parse(pythonServiceTpl)) // TODO - pick the service template per language
}

func (m *trinsicModule) Name() string { return "trinsic-sdk" }

func (m *trinsicModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	for _, t := range targets {
		m.generateServices(t)
	}
	return m.Artifacts()
}

func (m *trinsicModule) generateServices(f pgs.File) {
	op := strings.TrimSuffix(f.InputPath().String(), ".proto") + "_service.py" // TODO - pick the file extension per language
	m.AddGeneratorTemplateFile(op, m.serviceTpl, f)
}

func main() {
	pgs.Init(
		pgs.DebugEnv("DEBUG"),
	).RegisterModule(
		trinsicPython(), // TODO - Support other languages
	).RegisterPostProcessor(
		pgsgo.GoFmt(),
	).Render()
}

const pythonServiceTpl = `# Code generated by protoc-gen-trinsic. DO NOT EDIT.
# source: {{ .InputPath }}
from trinsic.proto.sdk.options.v1 import ServiceOptions
from trinsic.service_base import ServiceBase
{{ range .Services }}
class {{ .Name }}ServiceBase(ServiceBase):
    """{{ docComment . }}"""

    def __init__(self, server_config: ServiceOptions = None):
        """Initialize a connection to the server."""
        super().__init__(server_config)
        self.client: {{ .Name }}Stub = self.stub_with_metadata({{ .Name }}Stub)

{{ range .Methods }}
    async def {{ .Name.LowerSnakeCase }}(self, *, request: {{ pythonMethodParamType . }}) -> {{ pythonMethodReturnType . }}:
        """{{ docComment . }}"""
        return await self.client.{{ .Name.LowerSnakeCase }}(request)
{{ end }}
{{ end }}`
