package main

import (
	"github.com/trinsic-id/protoc-gen-sdk/lang_types"
	"strings"
	"text/template"

	pgs "github.com/lyft/protoc-gen-star"
	pgsgo "github.com/lyft/protoc-gen-star/lang/go"
)

type trinsicModule struct {
	*pgs.ModuleBase
	ctx        pgsgo.Context
	serviceTpl *template.Template
	fileExt    string
}

func trinsicPython() *trinsicModule {
	funcs := getTemplateFuncs()
	return &trinsicModule{
		ModuleBase: &pgs.ModuleBase{},
		serviceTpl: template.Must(template.New("pythonService").Funcs(funcs).Parse(pythonServiceTpl)),
		fileExt:    "py",
	}
}

func trinsicDart() *trinsicModule {
	funcs := getTemplateFuncs()
	return &trinsicModule{
		ModuleBase: &pgs.ModuleBase{},
		serviceTpl: template.Must(template.New("dartService").Funcs(funcs).Parse(dartServiceTpl)),
		fileExt:    "dart",
	}
}

func getTemplateFuncs() map[string]interface{} {
	funcs := map[string]interface{}{
		"methodParamType":  lang_types.MethodParamType,
		"methodReturnType": lang_types.MethodReturnType,
		"docComment":       lang_types.EntityDocComment,
	} // TODO - Handle the per-language type information
	return funcs
}

func (m *trinsicModule) InitContext(c pgs.BuildContext) {
	m.ModuleBase.InitContext(c)
	m.ctx = pgsgo.InitContext(c.Parameters())
}

func (m *trinsicModule) Name() string { return "trinsic-sdk" }

func (m *trinsicModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	for _, t := range targets {
		m.generateServices(t)
	}
	return m.Artifacts()
}

func (m *trinsicModule) generateServices(f pgs.File) {
	op := strings.TrimSuffix(f.InputPath().String(), ".proto") + "_service." + m.fileExt
	m.AddGeneratorTemplateFile(op, m.serviceTpl, f)
}

func main() {
	pgs.Init(pgs.DebugEnv("DEBUG")).
		RegisterModule(trinsicPython()).
		RegisterModule(trinsicDart()).
		RegisterPostProcessor(pgsgo.GoFmt()).
		Render()
}

const pythonServiceTpl = `# Code generated by protoc-gen-trinsic. DO NOT EDIT.
# source: {{ .InputPath }}
from trinsic.proto.sdk.options.v1 import ServiceOptions
from trinsic.service_base import ServiceBase
{{ range .Services }}
class {{ .Name }}ServiceBase(ServiceBase):
    """{{ docComment . }}"""

    def __init__(self, server_config: ServiceOptions = None):
        """Initialize a connection to the server."""
        super().__init__(server_config)
        self.client: {{ .Name }}Stub = self.stub_with_metadata({{ .Name }}Stub)

{{ range .Methods }}
    async def {{ .Name.LowerSnakeCase }}(self, *, request: {{ methodParamType . }}) -> {{ methodReturnType . }}:
        """{{ docComment . }}"""
        return await self.client.{{ .Name.LowerSnakeCase }}(request)
{{ end }}
{{ end }}`

const dartServiceTpl = `// Code generated by protoc-gen-trinsic. DO NOT EDIT.
// source: {{ .InputPath }}
import 'package:trinsic_dart/src/service_base.dart';
{{ range .Services }}
class {{ .Name }}ServiceBase extends ServiceBase {
    /// {{ docComment . }}
    late {{ .Name }}Client client;

    {{ .Name }}ServiceBase(ServiceOptions? serverOptions) : super(serverOptions) {
        client = {{ .Name }}Client(super.channel, interceptors: [MetadataInterceptor(this)]);
    }{{ range .Methods }}
    
    Future<{{ methodReturnType . }}> {{ .Name.LowerCamelCase }}({{ methodParamType . }} request) async {
        /// {{ docComment . }}
        return await client.{{ .Name.LowerCamelCase }}(request);
    }{{ end }}
}{{ end }}`
